// -----------------------------------------------------------------------------
// Prisma DB  -  https://prisma.io
// -----------------------------------------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// The generated dbml file is located at: ./dbml/schema.dbml
// Chech https://dbdiagram.io/d to visualy inspect the schema
generator dbml {
  provider = "prisma-dbml-generator"
}

// -----------------------------------------------------------------------------
// Enums
// -----------------------------------------------------------------------------

enum Role {
  admin
  student
  professor
}

enum Color {
  primary
  light
  dark
  red
  blue
  green
  yellow
  purple
  orange
  pink
}

// -----------------------------------------------------------------------------
// Models
// -----------------------------------------------------------------------------

model Institution {
  id          String    @id
  name        String
  description String
  imageUrl    String
  address     String
  city        String
  state       String
  phone       String
  email       String
  website     String
  novelties   Novelty[]
}

model Novelty {
  id            String      @id @default(cuid())
  description   String
  link          String
  imageUrl      String
  institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId String
}

model User {
  id              String         @id @default(cuid())
  firstName       String
  lastName        String
  birthDate       DateTime
  email           String         @unique
  profileImageUrl String
  password        String
  role            Role           @default(student)
  courses         CourseMember[]
  ownedCourses    Course[]
  File            File[]
  Message         Message[]
  Answer          Answer[]
}

model Course {
  id           String          @id @default(cuid())
  name         String
  slug         String          @unique
  description  String
  moreInfo     String
  imageUrl     String
  enrollmentId String          @unique
  settings     CourseSettings?
  members      CourseMember[]
  owner        User            @relation(fields: [ownerId], references: [id])
  ownerId      String
  forumId      String?
  Forum        Forum?
  Task         Task[]
}

model CourseMember {
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@id([userId, courseId])
}

model CourseSettings {
  baseColor Color  @default(primary)
  course    Course @relation(fields: [courseId], references: [id])
  courseId  String @unique
}

model File {
  id          String   @id @default(cuid())
  link        String
  professorId String
  professor   User     @relation(fields: [professorId], references: [id])
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
}

model Category {
  id          String @id @default(cuid())
  description String
  files       File[]
}

model Forum {
  id       String    @id @default(cuid())
  courseId String    @unique
  course   Course    @relation(fields: [courseId], references: [id])
  messages Message[]
}

model Message {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  description String
  datetime    DateTime
  Forum       Forum    @relation(fields: [forumId], references: [id])
  forumId     String
  replies     Reply[]
}

model Reply {
  id          String  @id @default(cuid())
  description String
  messageId   String
  message     Message @relation(fields: [messageId], references: [id])
}

model Task {
  id          String    @id @default(cuid())
  dateStart   DateTime?
  dateEnd     DateTime?
  name        String
  description String
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id])
  form        Form?
  answers     Answer[]
}

model Form {
  id     String  @id @default(cuid())
  fields Field[]
  task   Task    @relation(fields: [taskId], references: [id])
  taskId String  @unique
}

model FullForm {
  id     String      @id @default(cuid())
  fields FullField[]
  userId String
  taskId String
  answer Answer?     @relation(fields: [userId, taskId], references: [userId, taskId])
}

model Field {
  id            String @id @default(cuid())
  formId        String
  form          Form   @relation(fields: [formId], references: [id])
  type          String
  question      String
  correctAnswer String
  value         Float
}

model FullField {
  id            String   @id @default(cuid())
  formId        String
  form          FullForm @relation(fields: [formId], references: [id])
  type          String
  question      String
  correctAnswer String
  value         Float
  studentAnswer String
  dateSubmitted DateTime
  qualification Float
}

model Answer {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String

  form          FullForm?
  dateSubmitted DateTime
  qualification Float
  @@id([userId, taskId])
}
