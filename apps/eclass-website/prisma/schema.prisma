// -----------------------------------------------------------------------------
// Prisma DB  -  https://prisma.io
// -----------------------------------------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// The generated dbml file is located at: ./dbml/schema.dbml
// Chech https://dbdiagram.io/d to visualy inspect the schema
generator dbml {
  provider = "prisma-dbml-generator"
}

// -----------------------------------------------------------------------------
// Enums
// -----------------------------------------------------------------------------

enum Role {
  admin
  student
  professor
}

enum Color {
  primary
  light
  dark
  red
  blue
  green
  yellow
  purple
  orange
  pink
}

// -----------------------------------------------------------------------------
// Models
// -----------------------------------------------------------------------------

model Institution {
  id          String @id
  name        String
  description String
  imageUrl    String
  address     String
  city        String
  state       String
  phone       String
  email       String
  website     String
}

model Novelty {
  id          String   @id @default(cuid())
  title       String
  description String
  link        String
  imageUrl    String
  date        DateTime
}

model User {
  id                    String         @id @default(cuid())
  firstName             String
  lastName              String
  birthDate             DateTime
  email                 String         @unique
  institutionIdentifier String         @unique
  profileImageUrl       String
  password              String
  role                  Role           @default(student)
  courses               CourseMember[]
  ownedCourses          Course[]
  messages              Message[]
  replies               Reply[]
  answers               Answer[]
  folders               Folder[]
}

model Course {
  id           String          @id @default(cuid())
  name         String
  slug         String          @unique
  description  String
  moreInfo     String
  imageUrl     String
  enrollmentId String          @unique
  settings     CourseSettings?
  members      CourseMember[]
  owner        User?           @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId      String?
  forumId      String          @unique
  forum        Forum           @relation(fields: [forumId], references: [id])
  tasks        Task[]
  files        CourseFiles[]
}

model CourseMember {
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  @@id([userId, courseId])
}

model CourseSettings {
  baseColor Color  @default(primary)
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String @unique
}

model File {
  id         String        @id @default(cuid())
  title      String
  format     String
  link       String
  size       Float
  folderId   String
  folder     Folder        @relation(fields: [folderId], references: [id])
  assignedTo CourseFiles[]
}

model CourseFiles {
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  file     File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId   String

  @@id([courseId, fileId])
}

model Folder {
  id          String @id @default(cuid())
  professorId String
  professor   User   @relation(fields: [professorId], references: [id])
  title       String
  color       Color  @default(primary)
  files       File[]
}

model Forum {
  id       String    @id @default(cuid())
  course   Course?
  messages Message[]
}

model Message {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  description String
  datetime    DateTime
  forum       Forum    @relation(fields: [forumId], references: [id])
  forumId     String
  replies     Reply[]
}

model Reply {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  description String
  datetime    DateTime
  messageId   String
  message     Message  @relation(fields: [messageId], references: [id])
}

model Task {
  id          String    @id @default(cuid())
  dateStart   DateTime?
  dateEnd     DateTime?
  name        String
  description String
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id])
  answers     Answer[]
  fields      Field[]
}

model Field {
  id              String    @id @default(cuid())
  type            String
  question        String
  possibleAnswers String?
  correctAnswer   String?
  value           Float?
  studentAnswer   String?
  dateSubmitted   DateTime?
  qualification   Float?
  Task            Task?     @relation(fields: [taskId], references: [id])
  taskId          String?
  Answer          Answer?   @relation(fields: [answerUserId, answerTaskId], references: [userId, taskId])
  answerUserId    String?
  answerTaskId    String?
}

model Answer {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String

  fields        Field[]
  dateSubmitted DateTime?
  qualification Float?

  @@id([userId, taskId])
}
